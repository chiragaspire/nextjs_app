{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aspire09/Desktop/CHIRAG/React js/chirag/12_NEXT_JS_PROJECT/nextjs_app/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport Head from 'next/head';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetups.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetups.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      id: props.meetups.id,\n      image: props.meetups.image,\n      title: props.meetups.title,\n      address: props.meetups.address,\n      description: props.meetups.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://chirag_aspire:chirag.aspire@cluster0.zoh4q.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n\n  if (client) {\n    console.log(\"connected!!!\");\n  }\n\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://chirag_aspire:chirag.aspire@cluster0.zoh4q.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetups: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/aspire09/Desktop/CHIRAG/React js/chirag/12_NEXT_JS_PROJECT/nextjs_app/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","Head","MeetupDetails","props","meetups","title","description","id","image","address","getStaticPaths","client","connect","console","log","db","meetupsCollection","collection","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne"],"mappings":"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","sourcesContent":["import { MongoClient,ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport Head from 'next/head';\nconst MeetupDetails = (props) => {\n    return (\n        <>\n            <Head>\n                <title>{props.meetups.title}</title>\n                <meta name='description' content={props.meetups.description} />\n            </Head>\n            <MeetupDetail\n                id={props.meetups.id}\n                image={props.meetups.image}\n                title={props.meetups.title}\n                address={props.meetups.address}\n                description={props.meetups.description}\n            />\n        </>\n        \n    )\n}\n\nexport const getStaticPaths = async() => {\n    const client = await MongoClient.connect(\n        'mongodb+srv://chirag_aspire:chirag.aspire@cluster0.zoh4q.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n    if (client) {\n      console.log(\"connected!!!\");\n      }\n    const db = client.db();\n    \n    const meetupsCollection = db.collection('meetups');\n            \n    const meetups = await meetupsCollection.find({},{_id:1}).toArray();\n    client.close();\n    return {\n        fallback: false,\n        paths:meetups.map(meetup=>({params:{meetupId:meetup._id.toString()}})),\n        \n    }\n}\n\nexport const getStaticProps = async (context) => {\n    const meetupId = context.params.meetupId;\n    const client = await MongoClient.connect(\n        'mongodb+srv://chirag_aspire:chirag.aspire@cluster0.zoh4q.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'\n      );\n      const db = client.db();\n    \n      const meetupsCollection = db.collection('meetups');\n    \n      const selectedMeetup = await meetupsCollection.findOne({\n        _id: ObjectId(meetupId),\n      });\n    \n      client.close();\n    return {\n        props: {\n            meetups: {\n                \n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description,\n            }\n        }\n    };\n  }\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}